// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id           String        @id @default(auto()) @map("_id") @db.ObjectId
  username     String        @unique
  password     String
  role         Role
  pinCode      String?
  isVerified   Boolean       @default(false)
  refreshToken String?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  user         User?
  otps         OTP[]
  posts        Post[]
  likes        Like[]
  comments     Comment[]
  likeComments LikeComment[]
  participants Participant[]
  babyDiaries  BabyDiary[]
}

model User {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  accountId String  @unique @db.ObjectId
  account   Account @relation(fields: [accountId], references: [id])

  avatar     String?
  bio        String?
  background String?

  email       String? // @unique
  phoneNumber String? // @unique
  fullName    String?
  dob         DateTime?
  gender      Gender?
  address     String?
  province    String?
  district    String?
  ward        String?

  pregnancyStatus PregnancyStatus?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  childs      Child[]
  memberships Membership[]
}

model OTP {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  code      String   @unique
  accountId String   @db.ObjectId
  account   Account  @relation(fields: [accountId], references: [id])
  type      OTPType
  expiredAt DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Child {
  id        String      @id @default(auto()) @map("_id") @db.ObjectId
  fullName  String?
  nickname  String?
  status    ChildStatus @default(UNBORN) // Sử dụng enum cho trạng thái
  birthDate DateTime?
  dueDate   DateTime?
  gender    Gender      @default(OTHER)
  userId    String      @db.ObjectId
  user      User        @relation(fields: [userId], references: [id])

  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  babyDiaries BabyDiary[]
}

model Group {
  id          String       @id @default(auto()) @map("_id") @db.ObjectId
  name        String       @unique
  background  String? // Ảnh bìa
  description String?
  memberships Membership[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  posts     Post[]
}

model Membership {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  userId  String @db.ObjectId
  groupId String @db.ObjectId
  user    User   @relation(fields: [userId], references: [id])
  group   Group  @relation(fields: [groupId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Post {
  id       String   @id @default(auto()) @map("_id") @db.ObjectId
  content  String?
  images   String[] @default([])
  authorId String   @db.ObjectId
  author   Account  @relation(fields: [authorId], references: [id])

  // 1 post có thể thuộc về 1 group hoặc không thuộc về group nào, hoặc thuộc về trang cá nhân

  groupId String? @db.ObjectId
  group   Group?  @relation(fields: [groupId], references: [id])

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  likes     Like[]
  comments  Comment[]
}

model Like {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  accountId String  @db.ObjectId
  account   Account @relation(fields: [accountId], references: [id])

  post   Post?   @relation(fields: [postId], references: [id])
  postId String? @db.ObjectId

  article   Article? @relation(fields: [articleId], references: [id])
  articleId String?  @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Comment {
  id           String        @id @default(auto()) @map("_id") @db.ObjectId
  content      String?
  images       String[]      @default([])
  postId       String?       @db.ObjectId
  post         Post?         @relation(fields: [postId], references: [id])
  authorId     String        @db.ObjectId
  author       Account       @relation(fields: [authorId], references: [id])
  parentId     String?       @db.ObjectId
  parent       Comment?      @relation("ParentComment", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  childrens    Comment[]     @relation("ParentComment")
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  likeComments LikeComment[]

  article   Article? @relation(fields: [articleId], references: [id])
  articleId String?  @db.ObjectId
  event     Event?   @relation(fields: [eventId], references: [id])
  eventId   String?  @db.ObjectId
}

model LikeComment {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  accountId String  @db.ObjectId
  account   Account @relation(fields: [accountId], references: [id])
  commentId String  @db.ObjectId
  comment   Comment @relation(fields: [commentId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Category {
  id            String        @id @default(auto()) @map("_id") @db.ObjectId
  name          String        @unique
  description   String?
  subCategories SubCategory[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model SubCategory {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String?
  image       String
  categoryId  String    @db.ObjectId
  category    Category  @relation(fields: [categoryId], references: [id])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  articles    Article[]
}

model Article {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  thumbnail   String
  title       String
  description String
  content     String
  images      String[] @default([])

  subCategoryId String @db.ObjectId

  subCategory SubCategory @relation(fields: [subCategoryId], references: [id])

  likes     Like[]
  comments  Comment[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Event {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  thumbnail   String
  title       String
  description String
  startTime   DateTime
  endTime     DateTime

  comments Comment[]

  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  participants Participant[]
}

model Participant {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  accountId String   @db.ObjectId
  eventId   String   @db.ObjectId
  joinedAt  DateTime @default(now())
  account   Account  @relation(fields: [accountId], references: [id])
  event     Event    @relation(fields: [eventId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model BabyDiary {
  id       String   @id @default(auto()) @map("_id") @db.ObjectId
  content  String?
  images   String[] @default([])
  childId  String   @db.ObjectId
  child    Child    @relation(fields: [childId], references: [id])
  authorId String   @db.ObjectId
  author   Account  @relation(fields: [authorId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model FoodCategory {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String   @unique
  imageUrl  String
  foods     Food[]   @relation("CategoryFoods")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Food {
  id             String       @id @default(auto()) @map("_id") @db.ObjectId
  name           String       @unique
  description    String
  imageUrl       String
  foodCategory   FoodCategory @relation("CategoryFoods", fields: [foodCategoryId], references: [id])
  foodCategoryId String       @db.ObjectId
  guidelines     Guideline[]  @relation("FoodGuidelines")
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
}

model Guideline {
  id          String        @id @default(auto()) @map("_id") @db.ObjectId
  type        GuidelineType // Enum type for guideline categories
  name        String
  description String
  food        Food          @relation("FoodGuidelines", fields: [foodId], references: [id])
  foodId      String        @db.ObjectId
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

enum GuidelineType {
  CAN_EAT // Có thể ăn -- Màu xanh
  CAN_EAT_NOT_RECOMMENDED // Có thể ăn nhưng không nên -- Màu vàng
  SHOULD_NOT_EAT // Không nên ăn -- Màu đỏ
}

enum Role {
  ADMIN
  USER
}

enum ChildStatus {
  BORN // Đã sinh
  UNBORN // Chưa sinh
}

enum Gender {
  MALE // NAM
  FEMALE // NỮ
  OTHER // KHÁC
}

enum PregnancyStatus {
  WISHING // Mong có thai
  PREGNANT // Đang mang thai
  HAS_CHILDREN // Đã có con
  NOT_WANTING // Chưa muốn có con
}

enum OTPType {
  FORGOT_PASSWORD
}

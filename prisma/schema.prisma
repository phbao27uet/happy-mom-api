// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                String             @id @default(auto()) @map("_id") @db.ObjectId
  username          String             @unique
  password          String
  role              Role
  pinCode           String?
  isVerified        Boolean            @default(false)
  refreshToken      String?
  pushTokens        String[]           @default([])
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  user              User?
  otps              OTP[]
  posts             Post[]
  likes             Like[]
  comments          Comment[]
  likeComments      LikeComment[]
  participants      Participant[]
  babyDiaries       BabyDiary[]
  alarms            Alarm[]
  // Friend feature
  friends           Friend[]           @relation("AccountAsSender") // Danh sách bạn bè mà mình gửi lời mời
  friendOf          Friend[]           @relation("AccountAsReceiver") // Danh sách bạn bè mà mình nhận lời mời
  easies            Easy[]
  easyActiveAccount EasyActiveAccount?
  savedStories      SavedStory[]
  userDealUsages    UserDealUsage[]
  menstrualCycles   MenstrualCycle[]
}

model User {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  accountId String  @unique @db.ObjectId
  account   Account @relation(fields: [accountId], references: [id])

  avatar     String?
  bio        String?
  background String?

  email       String? // @unique
  phoneNumber String? // @unique
  fullName    String?
  dob         DateTime?
  gender      Gender?
  address     String?
  province    String?
  district    String?
  ward        String?

  pregnancyStatus PregnancyStatus?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  childs      Child[]
  memberships Membership[]
}

model Friend {
  id        String       @id @default(auto()) @map("_id") @db.ObjectId
  account   Account      @relation("AccountAsSender", fields: [accountId], references: [id])
  accountId String       @db.ObjectId // Người gửi lời mời
  friend    Account      @relation("AccountAsReceiver", fields: [friendId], references: [id])
  friendId  String       @db.ObjectId // Người nhận lời mời
  status    FriendStatus // Trạng thái kết bạn
  createdAt DateTime     @default(now())
}

model OTP {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  code      String   @unique
  accountId String   @db.ObjectId
  account   Account  @relation(fields: [accountId], references: [id])
  type      OTPType
  expiredAt DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Child {
  id        String      @id @default(auto()) @map("_id") @db.ObjectId
  fullName  String?
  nickname  String?
  status    ChildStatus @default(UNBORN) // Sử dụng enum cho trạng thái
  birthDate DateTime?
  dueDate   DateTime?
  gender    Gender      @default(OTHER)
  userId    String      @db.ObjectId
  user      User        @relation(fields: [userId], references: [id])
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  babyDiaries       BabyDiary[]
  vaccineInjections VaccineInjection[]
  baseEntries       BabyTracking[]
  toothGrowths      ToothGrowth[]
  emotionLogs       EmotionLog[]
}

model Group {
  id          String       @id @default(auto()) @map("_id") @db.ObjectId
  name        String       @unique
  background  String? // Ảnh bìa
  description String?
  memberships Membership[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  posts     Post[]
}

model Membership {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  userId  String @db.ObjectId
  groupId String @db.ObjectId
  user    User   @relation(fields: [userId], references: [id])
  group   Group  @relation(fields: [groupId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Post {
  id       String   @id @default(auto()) @map("_id") @db.ObjectId
  content  String?
  images   String[] @default([])
  authorId String   @db.ObjectId
  author   Account  @relation(fields: [authorId], references: [id])

  // 1 post có thể thuộc về 1 group hoặc thuộc về trang cá nhân

  groupId String? @db.ObjectId
  group   Group?  @relation(fields: [groupId], references: [id])

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  likes     Like[]
  comments  Comment[]
}

model Like {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  accountId String  @db.ObjectId
  account   Account @relation(fields: [accountId], references: [id])

  post   Post?   @relation(fields: [postId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  postId String? @db.ObjectId

  article   Article? @relation(fields: [articleId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  articleId String?  @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Comment {
  id           String        @id @default(auto()) @map("_id") @db.ObjectId
  content      String?
  images       String[]      @default([])
  postId       String?       @db.ObjectId
  post         Post?         @relation(fields: [postId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  authorId     String        @db.ObjectId
  author       Account       @relation(fields: [authorId], references: [id])
  parentId     String?       @db.ObjectId
  parent       Comment?      @relation("ParentComment", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  childrens    Comment[]     @relation("ParentComment")
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  likeComments LikeComment[]

  article   Article? @relation(fields: [articleId], references: [id])
  articleId String?  @db.ObjectId
  event     Event?   @relation(fields: [eventId], references: [id])
  eventId   String?  @db.ObjectId
}

model LikeComment {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  accountId String  @db.ObjectId
  account   Account @relation(fields: [accountId], references: [id])
  commentId String  @db.ObjectId
  comment   Comment @relation(fields: [commentId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Category {
  id            String        @id @default(auto()) @map("_id") @db.ObjectId
  name          String        @unique
  description   String?
  image         String?
  type          CategoryType  @default(ARTICLE)
  subCategories SubCategory[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  stories   Story[]
}

model SubCategory {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String?
  image       String
  categoryId  String   @db.ObjectId
  category    Category @relation(fields: [categoryId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  articles  Article[]
  recipeIds String[]  @db.ObjectId
  recipes   Recipe[]  @relation(fields: [recipeIds], references: [id])
}

// Công thức nấu ăn
model Recipe {
  id             String        @id @default(auto()) @map("_id") @db.ObjectId
  thumbnail      String
  title          String        @unique
  description    String
  cookingTime    Int // Thời gian nấu (phút)
  subCategoryIds String[]      @db.ObjectId
  subCategories  SubCategory[] @relation(fields: [subCategoryIds], references: [id])
  ingredients    Json // Mảng object ảnh và tên nguyên liệu {name: string, image: string}[]
  steps          Json // Mảng object mô tả các bước {description: string}[]
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
}

// Cẩm nang
model Article {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  thumbnail   String
  title       String
  description String
  content     String
  images      String[] @default([])

  subCategoryId String      @db.ObjectId
  subCategory   SubCategory @relation(fields: [subCategoryId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  likes     Like[]
  comments  Comment[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Event {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  thumbnail   String
  title       String
  description String
  startTime   DateTime
  endTime     DateTime

  comments Comment[]

  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  participants Participant[]
}

model Participant {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  accountId String   @db.ObjectId
  eventId   String   @db.ObjectId
  joinedAt  DateTime @default(now())
  account   Account  @relation(fields: [accountId], references: [id])
  event     Event    @relation(fields: [eventId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model BabyDiary {
  id       String   @id @default(auto()) @map("_id") @db.ObjectId
  content  String?
  images   String[] @default([])
  childId  String   @db.ObjectId
  child    Child    @relation(fields: [childId], references: [id])
  authorId String   @db.ObjectId
  author   Account  @relation(fields: [authorId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model FoodCategory {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String   @unique
  imageUrl  String
  foods     Food[]   @relation("CategoryFoods")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Food {
  id             String       @id @default(auto()) @map("_id") @db.ObjectId
  name           String       @unique
  description    String
  imageUrl       String
  foodCategory   FoodCategory @relation("CategoryFoods", fields: [foodCategoryId], references: [id])
  foodCategoryId String       @db.ObjectId
  guidelines     Guideline[]  @relation("FoodGuidelines")
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
}

model Guideline {
  id          String        @id @default(auto()) @map("_id") @db.ObjectId
  type        GuidelineType // Enum type for guideline categories
  name        String
  description String
  food        Food          @relation("FoodGuidelines", fields: [foodId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  foodId      String        @db.ObjectId
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

// ======== Báo thức ========
model Alarm {
  id       String    @id @default(auto()) @map("_id") @db.ObjectId
  type     AlarmType
  activity Activity
  time     DateTime
  isActive Boolean   @default(true)
  interval Interval?
  notes    String?

  accountId String   @db.ObjectId
  account   Account  @relation(fields: [accountId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Interval {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  minutes Float?
  alarm   Alarm  @relation(fields: [alarmId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  alarmId String @unique @db.ObjectId
}

// ======== Báo thức ========

// ===== Tiêm phòng ====
model Vaccine {
  id                      String        @id @default(auto()) @map("_id") @db.ObjectId
  name                    String        @unique
  diseaseDescription      String // Mô tả về bệnh
  vaccineTypesDescription String // Các loại vắc xin
  numberOfInjectionDoses  Int // Số liều tiêm
  sideEffects             String // Tác dụng phụ
  injectionDescription    String // Mô tả về cách tiêm
  createdAt               DateTime      @default(now())
  updatedAt               DateTime      @updatedAt
  vaccineDoeses           VaccineDoes[]
}

model VaccineDoes {
  id                String             @id @default(auto()) @map("_id") @db.ObjectId
  vaccineId         String             @db.ObjectId
  vaccine           Vaccine            @relation(fields: [vaccineId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  time              String
  dueVaccination    String
  isMandatory       Boolean            @default(true)
  description       String // Hiển thị trong màn lịch tiêm phòng
  priority          Int                @unique // Sắp xếp theo thứ tự ưu tiên
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  vaccineInjections VaccineInjection[]
}

model VaccineInjection {
  id            String                 @id @default(auto()) @map("_id") @db.ObjectId
  vaccineDoesId String                 @db.ObjectId
  vaccineDoes   VaccineDoes            @relation(fields: [vaccineDoesId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  childId       String                 @db.ObjectId
  child         Child                  @relation(fields: [childId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  injectionAt   DateTime?
  status        VaccineInjectionStatus @default(NOT_INJECTED)
  createdAt     DateTime               @default(now())
  updatedAt     DateTime               @updatedAt

  @@unique([vaccineDoesId, childId])
}

// ===== Tiêm phòng ====

// ===== Theo dõi em bé =====
model BabyTracking {
  id        String           @id @default(auto()) @map("_id") @db.ObjectId
  date      DateTime // Ngày ghi chú - startOfDay
  note      String?
  imageUrls String[]         @default([])
  type      BabyTrackingType
  childId   String           @db.ObjectId
  child     Child            @relation(fields: [childId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  pumpingEntry   PumpingEntry? // Hút sữa
  feedingEntry   FeedingEntry? // Theo dõi lượng sữa
  diaperEntry    DiaperEntry? // Thay bỉm
  sleepEntry     SleepEntry? // Ngủ
  solidFoodEntry SolidFoodEntry? // Ăn dặm 
}

model PumpingEntry {
  id                String       @id @default(auto()) @map("_id") @db.ObjectId
  babyTracking      BabyTracking @relation(fields: [babyTrackingId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  babyTrackingId    String       @unique @db.ObjectId
  time              DateTime
  totalAmount       Float
  leftBreastAmount  Float?
  rightBreastAmount Float?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model FeedingEntry {
  id             String        @id @default(auto()) @map("_id") @db.ObjectId
  babyTracking   BabyTracking  @relation(fields: [babyTrackingId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  babyTrackingId String        @unique @db.ObjectId
  feedingMethod  FeedingMethod
  startTime      DateTime
  endTime        DateTime
  milkType       MilkType
  amount         Float // lượng sữa (ml hoặc oz)
  duration       Float // in minutes

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Thay bỉm
model DiaperEntry {
  id             String       @id @default(auto()) @map("_id") @db.ObjectId
  babyTracking   BabyTracking @relation(fields: [babyTrackingId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  babyTrackingId String       @unique @db.ObjectId
  reason         DiaperReason
  time           DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model SleepEntry {
  id             String       @id @default(auto()) @map("_id") @db.ObjectId
  babyTracking   BabyTracking @relation(fields: [babyTrackingId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  babyTrackingId String       @unique @db.ObjectId
  startTime      DateTime
  endTime        DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model SolidFoodEntry {
  id             String         @id @default(auto()) @map("_id") @db.ObjectId
  babyTracking   BabyTracking   @relation(fields: [babyTrackingId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  babyTrackingId String         @unique @db.ObjectId
  startTime      DateTime
  endTime        DateTime
  foodName       String
  preparation    FoodTexture
  foodAmount     Float
  unit           FoodUnit
  preference     FoodPreference
  ingredient     String
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
}

// ===== Theo dõi em bé =====

model Medicine {
  id           String       @id @default(auto()) @map("_id") @db.ObjectId
  name         String       @unique
  description  String
  imageUrl     String
  unit         MedicineUnit
  instructions Json // Hướng dẫn sử dụng [{title: string, type: MedicineInstructionType, description: String}]
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
}

model EarlyEducation {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String
  imageUrl    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

// ======== Easy ========
model Easy {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  startWeek Int      @default(0)
  endWeek   Int?
  note      String?
  type      EasyType @default(PRIVATE)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  creatorId          String              @db.ObjectId
  creator            Account             @relation(fields: [creatorId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  easyActivityGroups EasyActivityGroup[]
  easyActiveAccounts EasyActiveAccount[]

  @@unique([creatorId, name])
  @@index([creatorId])
  @@index([type])
  @@index([startWeek, endWeek])
}

model EasyActivityGroup {
  id             String         @id @default(auto()) @map("_id") @db.ObjectId
  name           String
  easy           Easy           @relation(fields: [easyId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  easyId         String         @db.ObjectId
  easyActivities EasyActivity[]
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt

  @@index([easyId])
}

model EasyActivity {
  id              String             @id @default(auto()) @map("_id") @db.ObjectId
  type            EasyActivityType[]
  startTime       DateTime
  endTime         DateTime?
  duration        Float? // in minutes
  note            String?
  activityGroup   EasyActivityGroup  @relation(fields: [activityGroupId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  activityGroupId String             @db.ObjectId
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt

  @@index([activityGroupId])
  @@index([type])
  @@index([startTime, endTime])
}

model EasyActiveAccount {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  accountId String   @unique @db.ObjectId
  easyId    String   @db.ObjectId
  account   Account  @relation(fields: [accountId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  easy      Easy     @relation(fields: [easyId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// ======== Mọc răng ========
model ToothMaster {
  id           String        @id @default(auto()) @map("_id") @db.ObjectId
  toothNumber  Int
  name         String        @unique
  growthTime   String
  jawPosition  JawPosition
  toothGrowths ToothGrowth[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}

model ToothGrowth {
  id         String      @id @default(auto()) @map("_id") @db.ObjectId
  growthDate DateTime
  status     ToothStatus @default(NOT_GROWN)
  notes      String?
  images     String[]    @default([])
  tooth      ToothMaster @relation(fields: [toothId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  toothId    String      @db.ObjectId
  child      Child       @relation(fields: [childId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  childId    String      @db.ObjectId
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt

  @@unique([toothId, childId])
}

// ======== Cảm xúc của bé ========
model EmotionLog {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  date      DateTime @default(now())
  emotion   Emotion
  child     Child    @relation(fields: [childId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  childId   String   @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([date, childId])
}

// ======== Đọc truyện cho bé ========
model Story {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  name       String   @unique
  content    String
  category   Category @relation(fields: [categoryId], references: [id])
  categoryId String   @db.ObjectId

  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  savedStories SavedStory[]
}

model SavedStory {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  account   Account @relation(fields: [accountId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  accountId String  @db.ObjectId
  story     Story   @relation(fields: [storyId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  storyId   String  @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([accountId, storyId])
}

model Deal {
  id             String          @id @default(auto()) @map("_id") @db.ObjectId
  name           String
  description    String
  imageUrl       String
  expiredAt      DateTime
  type           DealType
  // version        Int             @default(0) // Thêm trường version cho optimistic locking
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  userDealUsages UserDealUsage[]
}

model UserDealUsage {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  accountId String   @db.ObjectId
  dealId    String   @db.ObjectId
  account   Account  @relation(fields: [accountId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  deal      Deal     @relation(fields: [dealId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  usedAt    DateTime @default(now())

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([accountId, dealId])
}

// Chu kỳ kinh nguyệt
model MenstrualCycle {
  id                   String       @id @default(auto()) @map("_id") @db.ObjectId
  accountId            String       @db.ObjectId
  account              Account      @relation(fields: [accountId], references: [id], onDelete: Cascade)
  startDate            DateTime // Ngày bắt đầu chu kỳ
  endDate              DateTime? // Ngày kết thúc chu kỳ (dự kiến)
  cycleLength          Int // Độ dài chu kỳ (ngày)
  menstruationDuration Int // Số ngày kinh nguyệt kéo dài
  entries              CycleEntry[] // Danh sách các bản ghi chi tiết theo ngày
  createdAt            DateTime     @default(now())
  updatedAt            DateTime     @updatedAt
}

// Bản ghi chu kỳ hàng ngày
model CycleEntry {
  id               String           @id @default(auto()) @map("_id") @db.ObjectId
  cycleId          String           @db.ObjectId
  cycle            MenstrualCycle   @relation(fields: [cycleId], references: [id], onDelete: Cascade)
  date             DateTime // Ngày ghi nhận
  menstruationFlow MenstruationFlow // Lưu lượng kinh nguyệt
  symptoms         SymptomOnEntry[] // Liên kết với triệu chứng
  moods            MoodOnEntry[] // Liên kết với tâm trạng
  sexualActivityId String?          @db.ObjectId
  sexualActivity   SexualActivity?  @relation(fields: [sexualActivityId], references: [id]) // Quan hệ tình dục
  notes            String? // Ghi chú thêm của người dùng (nếu có)
}

// Triệu chứng
model Symptom {
  id      String           @id @default(auto()) @map("_id") @db.ObjectId
  name    String // Tên triệu chứng (ví dụ: đau bụng, đau lưng)
  entries SymptomOnEntry[] // Liên kết với các bản ghi
}

// Tâm trạng
model Mood {
  id      String        @id @default(auto()) @map("_id") @db.ObjectId
  name    String        @unique // Tên tâm trạng (ví dụ: vui vẻ, buồn bã, căng thẳng)
  entries MoodOnEntry[] // Liên kết với các bản ghi
}

// Liên kết giữa Triệu chứng và Bản ghi
model SymptomOnEntry {
  id           String     @id @default(auto()) @map("_id") @db.ObjectId
  cycleEntryId String     @db.ObjectId
  cycleEntry   CycleEntry @relation(fields: [cycleEntryId], references: [id], onDelete: Cascade)
  symptomId    String     @db.ObjectId
  symptom      Symptom    @relation(fields: [symptomId], references: [id], onDelete: Cascade)
}

// Liên kết giữa Tâm trạng và Bản ghi
model MoodOnEntry {
  id           String     @id @default(auto()) @map("_id") @db.ObjectId
  cycleEntryId String     @db.ObjectId
  cycleEntry   CycleEntry @relation(fields: [cycleEntryId], references: [id], onDelete: Cascade)
  moodId       String     @db.ObjectId
  mood         Mood       @relation(fields: [moodId], references: [id], onDelete: Cascade)
}

// Quan hệ tình dục
model SexualActivity {
  id           String       @id @default(auto()) @map("_id") @db.ObjectId
  status       SexualStatus // Trạng thái quan hệ tình dục
  notes        String? // Ghi chú thêm về hoạt động tình dục
  cycleEntries CycleEntry[] // Liên kết với các bản ghi chu kỳ
}

enum SexualStatus {
  NONE // Không có hoạt động tình dục nào được ghi nhận
  SAFE // Quan hệ tình dục an toàn 
  UNSAFE // Quan hệ tình dục không an toàn
  SELF_PLEASURE // Tự sướng 
}

enum MenstruationFlow {
  NONE // Không có kinh nguyệt
  LIGHT // Lưu lượng kinh nguyệt nhẹ 
  MEDIUM // Lưu lượng kinh nguyệt trung bình 
  HEAVY // Lưu lượng kinh nguyệt nặng
}

enum DealType {
  FOOD    @map("Ăn uống")
  FASHION @map("thời trang")
  TRAVEL  @map("du lịch")
  FINANCE @map("tài chính")
}

enum Emotion {
  VERY_GOOD // Rất ngoan
  GOOD // Ngoan
  NORMAL // Bình thường
  FUSSY // Nhõng nhẽo
  VERY_FUSSY // Rất nhõng nhẽo
}

enum ToothStatus {
  NOT_GROWN // Chưa mọc
  GROWN // Đã mọc
}

enum JawPosition {
  UPPER // Hàm trên
  LOWER // Hàm dưới
}

enum EasyType {
  DEFAULT // Mặc định
  PUBLIC // Công khai khi tạo mới bởi người dùng
  PRIVATE // Bí mật khi tạo mới bởi người dùng
}

enum EasyActivityType {
  EAT // Ăn
  ACTIVITY // Hoạt động
  SLEEP // Ngủ
  YOUR_TIME // Thời gian của mẹ
  OTHER // Khác
}

enum MedicineUnit {
  PRESCRIPTION // Toa thuốc
  BLISTER // Viên nén
}

enum MedicineInstructionType {
  SAFE // An toàn
  UNSAFE // Không an toàn
  CAUTION // Cảnh báo
  SIDE_EFFECT // Tác dụng phụ
}

enum BabyTrackingType {
  PUMPING // Hút sữa
  FEEDING // Cho ăn
  DIAPER // Thay bỉm
  SLEEP // Ngủ
  SOLID_FOOD // Ăn dặm
}

enum FoodTexture {
  PUREED // Xay nhuyễn
  MASHED // Nghiền nhỏ
  SOFT // Mềm
  CHUNKY // Thô
}

enum FoodUnit {
  BOWL // Bát
  GRAM // Gram
  ML // Ml
}

enum FoodPreference {
  LOVED // Rất thích
  LIKED // Thích
  NEUTRAL // Bình thường
  DISLIKED // Không thích
}

enum FeedingMethod {
  BREAST // Bú mẹ
  BOTTLE // Bú bình
}

enum MilkType {
  BREAST_MILK // Sữa mẹ
  FORMULA // Sữa công thức
}

enum DiaperReason {
  PEE // Bé tè
  POO // Bé ị
  BOTH // Bé vừa tè vừa ị
  DRY_CHANGE // Bỉm khô thích thì thay
}

enum AlarmType {
  TIME // Báo thức thời gian cố định
  HOUR_INTERVAL // Kỳ giờ
  DAY_INTERVAL // Kỳ ngày
}

enum Activity {
  PUMPING // Hút sữa
  FEEDING // Cho ăn
  TEMPERATURE // Đo nhiệt độ
  DIAPER_CHANGE // Thay bỉm
  MEDICINE // Uống thuốc
  SLEEPING // Đi ngủ
  OTHER // Khác
}

enum GuidelineType {
  CAN_EAT // Có thể ăn -- Màu xanh
  CAN_EAT_NOT_RECOMMENDED // Có thể ăn nhưng không nên -- Màu vàng
  SHOULD_NOT_EAT // Không nên ăn -- Màu đỏ
}

enum Role {
  ADMIN
  USER
}

enum ChildStatus {
  BORN // Đã sinh
  UNBORN // Chưa sinh
}

enum Gender {
  MALE // NAM
  FEMALE // NỮ
  OTHER // KHÁC
}

enum PregnancyStatus {
  WISHING // Mong có thai
  PREGNANT // Đang mang thai
  HAS_CHILDREN // Đã có con
  NOT_WANTING // Chưa muốn có con
}

enum OTPType {
  FORGOT_PASSWORD
}

enum VaccineInjectionStatus {
  INJECTED // Đã tiêm
  NOT_INJECTED // Chưa tiêm
  SKIP // Bỏ qua
}

enum FriendStatus {
  PENDING // Đang chờ xác nhận
  ACCEPTED // Đã chấp nhận
  DECLINED // Đã từ chối
}

enum CategoryType {
  RECIPE // Công thức nấu ăn
  ARTICLE // Cẩm nang
  STORY // Truyện
}
